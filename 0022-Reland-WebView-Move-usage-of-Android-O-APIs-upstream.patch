From b5c0a532b28462c038fdf631e130bad6551f09ea Mon Sep 17 00:00:00 2001
From: Paul Miller <paulmiller@chromium.org>
Date: Tue, 29 Aug 2017 22:24:19 +0000
Subject: [PATCH 22/24] Reland "WebView: Move usage of Android O APIs upstream"

This reverts commit 1bf3158833e8ecbc8dbb1ea3288864f61ba208e5.

Original change's description:
> Revert "WebView: Move usage of Android O APIs upstream"
>
> This reverts commit 44bed764c12d64c2cfb4dc60c593fb63fb8f2a38.
>
> Reason for revert: broke downstream
>
> Original change's description:
> > WebView: Move usage of Android O APIs upstream
> >
> > These new classes are moved from downstream to upstream:
> >  - AwAutofillManager
> >  - AwAutofillProvider
> >  - WebViewChromiumFactoryProviderForO
> >
> > These existing classes have their downstream counterparts merged in:
> >  - SmartSelectionProvider
> >  - WebViewChromium
> >  - WebViewContentsClientAdapter
> >  - WebViewDelegateFactory
> >
> > ContentClassFactory is removed, and ContentClassFactoryInstaller is
> > replaced with SmartSelectionToggle. The previous design here was for
> > ContentClassFactoryInstaller to enable smart selection by installing
> > SmartSelectionProviderImpl (downstream) as the implementation of
> > SmartSelectionProvider. Since SmartSelectionProviderImpl is now merged
> > into SmartSelectionProvider, polymorphism is no longer needed. The new
> > design is for SmartSelectionToggle to enable smart selection directly by
> > setting a boolean in SmartSelectionClient
> >
> > We set a GN flag, unpublished_apis_upstream, to omit the corresponding
> > downstream classes. This flag will be removed after the downstream
> > classes are removed.
> >
> > We do some O-related cleanup: some Object references are replaced with
> > with TextClassifier and AutofillValue. In SelectionPopupController, the
> > reflection for android.R.id.textAssist is removed.
> >
> > WebViewChromiumFactoryProviderForO will remain as an O-specific entry
> > point. (This differs from previous Android versions.)
> >
> > BUG=756653
> >
> > Change-Id: If5aa3103124d3e3e0bd2e5cbb1610650b8765faf
> > Reviewed-on: https://chromium-review.googlesource.com/620109
> > Commit-Queue: Paul Miller <paulmiller@chromium.org>
> > Reviewed-by: Tima Vaisburd <timav@chromium.org>
> > Reviewed-by: Theresa <twellington@chromium.org>
> > Reviewed-by: Bo <boliu@chromium.org>
> > Reviewed-by: Tao Bai <michaelbai@chromium.org>
> > Reviewed-by: Donn Denman <donnd@chromium.org>
> > Cr-Commit-Position: refs/heads/master@{#496156}
>
> TBR=michaelbai@chromium.org,boliu@chromium.org,donnd@chromium.org,twellington@chromium.org,timav@chromium.org,paulmiller@chromium.org
>
> Change-Id: I2abd0f99b110c6883c1dea8b0b6b3b41354c9e26
> No-Presubmit: true
> No-Tree-Checks: true
> No-Try: true
> Bug: 756653
> Reviewed-on: https://chromium-review.googlesource.com/625248
> Reviewed-by: Tima Vaisburd <timav@chromium.org>
> Commit-Queue: Paul Miller <paulmiller@chromium.org>
> Cr-Commit-Position: refs/heads/master@{#496190}

TBR=michaelbai@chromium.org,boliu@chromium.org,donnd@chromium.org,twellington@chromium.org,timav@chromium.org,paulmiller@chromium.org

# Not skipping CQ checks because original CL landed > 1 day ago.

Bug: 756653
Change-Id: I4a030259cd8fcd5cda78579736b12a8dc4333534
Reviewed-on: https://chromium-review.googlesource.com/641354
Reviewed-by: Paul Miller <paulmiller@chromium.org>
Reviewed-by: Donn Denman <donnd@chromium.org>
Commit-Queue: Paul Miller <paulmiller@chromium.org>
Cr-Commit-Position: refs/heads/master@{#498255}
---
 android_webview/BUILD.gn                           |   2 +
 android_webview/glue/BUILD.gn                      |   1 +
 android_webview/glue/glue.gni                      |   4 +
 .../android/webview/chromium/WebViewChromium.java  |  74 +++-
 .../chromium/WebViewChromiumFactoryProvider.java   |   7 +-
 .../WebViewChromiumFactoryProviderForO.java        |  15 +
 .../chromium/WebViewContentsClientAdapter.java     |  23 +-
 .../webview/chromium/WebViewDelegateFactory.java   |   2 +-
 .../android_webview/AwAutofillManager.java         |  97 ++++++
 .../android_webview/AwAutofillProvider.java        | 378 +++++++++++++++++++++
 .../org/chromium/android_webview/AwContents.java   |  12 +-
 .../contextualsearch/ContextualSearchManager.java  |   7 +-
 .../components/autofill/AutofillProvider.java      |   3 +-
 content/public/android/BUILD.gn                    |   2 +-
 .../content/browser/ContentClassFactory.java       |  48 ---
 .../chromium/content/browser/ContentViewCore.java  |  10 +-
 .../chromium/content/browser/SelectionClient.java  |   8 +-
 .../content/browser/SelectionPopupController.java  |  31 +-
 .../content/browser/SmartSelectionClient.java      |  25 +-
 .../content/browser/SmartSelectionProvider.java    | 195 ++++++++---
 .../browser/SmartSelectionToggle.java              |  16 +
 21 files changed, 804 insertions(+), 156 deletions(-)
 create mode 100644 android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java
 create mode 100644 android_webview/java/src/org/chromium/android_webview/AwAutofillManager.java
 create mode 100644 android_webview/java/src/org/chromium/android_webview/AwAutofillProvider.java
 delete mode 100644 content/public/android/java/src/org/chromium/content/browser/ContentClassFactory.java
 create mode 100644 content/public/android/java/src/org/chromium/content_public/browser/SmartSelectionToggle.java

diff --git a/android_webview/BUILD.gn b/android_webview/BUILD.gn
index fee1a905b769..8ee8da76959f 100644
--- a/android_webview/BUILD.gn
+++ b/android_webview/BUILD.gn
@@ -776,6 +776,8 @@ android_library("android_webview_java") {
     "java/src/org/chromium/android_webview/AutofillActionModeCallback.java",
     "java/src/org/chromium/android_webview/AwActionModeCallback.java",
     "java/src/org/chromium/android_webview/AwAutofillClient.java",
+    "java/src/org/chromium/android_webview/AwAutofillManager.java",
+    "java/src/org/chromium/android_webview/AwAutofillProvider.java",
     "java/src/org/chromium/android_webview/AwBrowserContext.java",
     "java/src/org/chromium/android_webview/AwBrowserProcess.java",
     "java/src/org/chromium/android_webview/AwContentVideoViewEmbedder.java",
diff --git a/android_webview/glue/BUILD.gn b/android_webview/glue/BUILD.gn
index d2218ecbd2c0..a289878100c2 100644
--- a/android_webview/glue/BUILD.gn
+++ b/android_webview/glue/BUILD.gn
@@ -46,6 +46,7 @@ android_library("glue") {
     "java/src/com/android/webview/chromium/WebMessagePortAdapter.java",
     "java/src/com/android/webview/chromium/WebStorageAdapter.java",
     "java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java",
+    "java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java",
     "java/src/com/android/webview/chromium/WebViewChromium.java",
     "java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java",
     "java/src/com/android/webview/chromium/WebViewDatabaseAdapter.java",
diff --git a/android_webview/glue/glue.gni b/android_webview/glue/glue.gni
index cdc293d445e0..0a3ce579dbe0 100644
--- a/android_webview/glue/glue.gni
+++ b/android_webview/glue/glue.gni
@@ -15,3 +15,7 @@ glue_library_deps = [
   "//net/android:net_java",
   "//ui/android:ui_java",
 ]
+
+# Omit downstream *ForO classes.
+# TODO(paulmiller): Remove this after removing those downstream classes.
+unpublished_apis_upstream = true
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
index da5114aa42ab..b1911e25f341 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromium.java
@@ -24,6 +24,7 @@ import android.os.Looper;
 import android.os.Message;
 import android.print.PrintDocumentAdapter;
 import android.util.Log;
+import android.util.SparseArray;
 import android.view.DragEvent;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
@@ -33,8 +34,10 @@ import android.view.ViewStructure;
 import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.accessibility.AccessibilityNodeProvider;
+import android.view.autofill.AutofillValue;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputConnection;
+import android.view.textclassifier.TextClassifier;
 import android.webkit.DownloadListener;
 import android.webkit.FindActionModeCallback;
 import android.webkit.ValueCallback;
@@ -55,6 +58,7 @@ import org.chromium.android_webview.AwContentsStatics;
 import org.chromium.android_webview.AwPrintDocumentAdapter;
 import org.chromium.android_webview.AwSettings;
 import org.chromium.android_webview.ResourcesContextWrapperFactory;
+import org.chromium.android_webview.renderer_priority.RendererPriority;
 import org.chromium.base.ThreadUtils;
 import org.chromium.base.annotations.SuppressFBWarnings;
 import org.chromium.components.autofill.AutofillProvider;
@@ -1487,19 +1491,79 @@ class WebViewChromium implements WebViewProvider, WebViewProvider.ScrollDelegate
     @Override
     public void setRendererPriorityPolicy(
             int rendererRequestedPriority, boolean waivedWhenNotVisible) {
-        // TODO(paulmiller): Unfork O APIs
+        @RendererPriority
+        int awRendererRequestedPriority;
+        switch (rendererRequestedPriority) {
+            case WebView.RENDERER_PRIORITY_WAIVED:
+                awRendererRequestedPriority = RendererPriority.WAIVED;
+                break;
+            case WebView.RENDERER_PRIORITY_BOUND:
+                awRendererRequestedPriority = RendererPriority.LOW;
+                break;
+            default:
+            case WebView.RENDERER_PRIORITY_IMPORTANT:
+                awRendererRequestedPriority = RendererPriority.HIGH;
+                break;
+        }
+        mAwContents.setRendererPriorityPolicy(awRendererRequestedPriority, waivedWhenNotVisible);
     }
 
     @Override
     public int getRendererRequestedPriority() {
-        // TODO(paulmiller): Unfork O APIs
-        return 0;
+        @RendererPriority
+        final int awRendererRequestedPriority = mAwContents.getRendererRequestedPriority();
+        switch (awRendererRequestedPriority) {
+            case RendererPriority.WAIVED:
+                return WebView.RENDERER_PRIORITY_WAIVED;
+            case RendererPriority.LOW:
+                return WebView.RENDERER_PRIORITY_BOUND;
+            default:
+            case RendererPriority.HIGH:
+                return WebView.RENDERER_PRIORITY_IMPORTANT;
+        }
     }
 
     @Override
     public boolean getRendererPriorityWaivedWhenNotVisible() {
-        // TODO(paulmiller): Unfork O APIs
-        return false;
+        return mAwContents.getRendererPriorityWaivedWhenNotVisible();
+    }
+
+    @Override
+    public void setTextClassifier(TextClassifier textClassifier) {
+        mAwContents.setTextClassifier(textClassifier);
+    }
+
+    @Override
+    public TextClassifier getTextClassifier() {
+        return (TextClassifier) mAwContents.getTextClassifier();
+    }
+
+    public void autofill(final SparseArray<AutofillValue> values) {
+        mFactory.startYourEngines(false);
+        if (checkNeedsPost()) {
+            mFactory.runVoidTaskOnUiThreadBlocking(new Runnable() {
+                @Override
+                public void run() {
+                    autofill(values);
+                }
+            });
+        }
+        mAwContents.autofill(values);
+    }
+
+    @Override
+    public void onProvideAutofillVirtualStructure(final ViewStructure structure, final int flags) {
+        mFactory.startYourEngines(false);
+        if (checkNeedsPost()) {
+            mFactory.runVoidTaskOnUiThreadBlocking(new Runnable() {
+                @Override
+                public void run() {
+                    onProvideAutofillVirtualStructure(structure, flags);
+                }
+            });
+            return;
+        }
+        mAwContents.onProvideAutoFillVirtualStructure(structure, flags);
     }
 
     // WebViewProvider glue methods ---------------------------------------------------------------
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java
index 6673e78d2dcd..0d2354f50329 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProvider.java
@@ -35,6 +35,7 @@ import android.webkit.WebViewProvider;
 
 import com.android.webview.chromium.WebViewDelegateFactory.WebViewDelegate;
 
+import org.chromium.android_webview.AwAutofillProvider;
 import org.chromium.android_webview.AwBrowserContext;
 import org.chromium.android_webview.AwBrowserProcess;
 import org.chromium.android_webview.AwContents;
@@ -65,6 +66,7 @@ import org.chromium.base.library_loader.NativeLibraries;
 import org.chromium.base.library_loader.ProcessInitException;
 import org.chromium.components.autofill.AutofillProvider;
 import org.chromium.content.browser.input.LGEmailActionModeWorkaround;
+import org.chromium.content_public.browser.SmartSelectionToggle;
 import org.chromium.net.NetworkChangeNotifier;
 
 import java.io.File;
@@ -397,6 +399,7 @@ public class WebViewChromiumFactoryProvider implements WebViewFactoryProvider {
         PathService.override(PathService.DIR_MODULE, "/system/lib/");
         PathService.override(DIR_RESOURCE_PAKS_ANDROID, "/system/framework/webview/paks");
 
+        SmartSelectionToggle.setEnabled(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O);
         // Make sure that ResourceProvider is initialized before starting the browser process.
         final PackageInfo webViewPackageInfo = WebViewFactory.getLoadedPackageInfo();
         final String webViewPackageName = webViewPackageInfo.packageName;
@@ -712,13 +715,13 @@ public class WebViewChromiumFactoryProvider implements WebViewFactoryProvider {
         return mWebViewDelegate;
     }
 
-    // The method to support unreleased Android.
     WebViewContentsClientAdapter createWebViewContentsClientAdapter(WebView webView,
             Context context) {
         return new WebViewContentsClientAdapter(webView, context, mWebViewDelegate);
     }
 
     AutofillProvider createAutofillProvider(Context context, ViewGroup containerView) {
-        return null;
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return null;
+        return new AwAutofillProvider(context, containerView);
     }
 }
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java
new file mode 100644
index 000000000000..6962de17738a
--- /dev/null
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumFactoryProviderForO.java
@@ -0,0 +1,15 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package com.android.webview.chromium;
+
+class WebViewChromiumFactoryProviderForO extends WebViewChromiumFactoryProvider {
+    public static WebViewChromiumFactoryProvider create(android.webkit.WebViewDelegate delegate) {
+        return new WebViewChromiumFactoryProviderForO(delegate);
+    }
+
+    protected WebViewChromiumFactoryProviderForO(android.webkit.WebViewDelegate delegate) {
+        super(delegate);
+    }
+}
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
index 858c29a0dfec..56416ecb4783 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewContentsClientAdapter.java
@@ -27,6 +27,7 @@ import android.webkit.JsDialogHelper;
 import android.webkit.JsPromptResult;
 import android.webkit.JsResult;
 import android.webkit.PermissionRequest;
+import android.webkit.RenderProcessGoneDetail;
 import android.webkit.SslErrorHandler;
 import android.webkit.ValueCallback;
 import android.webkit.WebChromeClient;
@@ -1216,8 +1217,26 @@ class WebViewContentsClientAdapter extends AwContentsClient {
     }
 
     @Override
-    public boolean onRenderProcessGone(AwRenderProcessGoneDetail detail) {
-        return false;
+    public boolean onRenderProcessGone(final AwRenderProcessGoneDetail detail) {
+        // WebViewClient.onRenderProcessGone was added in O.
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return false;
+
+        try {
+            TraceEvent.begin("WebViewContentsClientAdapter.onRenderProcessGone");
+            return mWebViewClient.onRenderProcessGone(mWebView, new RenderProcessGoneDetail() {
+                @Override
+                public boolean didCrash() {
+                    return detail.didCrash();
+                }
+
+                @Override
+                public int rendererPriorityAtExit() {
+                    return detail.rendererPriority();
+                }
+            });
+        } finally {
+            TraceEvent.end("WebViewContentsClientAdapter.onRenderProcessGone");
+        }
     }
 
     // TODO: Move to upstream.
diff --git a/android_webview/glue/java/src/com/android/webview/chromium/WebViewDelegateFactory.java b/android_webview/glue/java/src/com/android/webview/chromium/WebViewDelegateFactory.java
index 23ecf26a73dd..cb75912b68d7 100644
--- a/android_webview/glue/java/src/com/android/webview/chromium/WebViewDelegateFactory.java
+++ b/android_webview/glue/java/src/com/android/webview/chromium/WebViewDelegateFactory.java
@@ -204,7 +204,7 @@ class WebViewDelegateFactory {
 
         @Override
         public boolean isMultiProcessEnabled() {
-            throw new UnsupportedOperationException();
+            return mDelegate.isMultiProcessEnabled();
         }
     }
 
diff --git a/android_webview/java/src/org/chromium/android_webview/AwAutofillManager.java b/android_webview/java/src/org/chromium/android_webview/AwAutofillManager.java
new file mode 100644
index 000000000000..2aefc06d02e3
--- /dev/null
+++ b/android_webview/java/src/org/chromium/android_webview/AwAutofillManager.java
@@ -0,0 +1,97 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.android_webview;
+
+import android.content.Context;
+import android.graphics.Rect;
+import android.view.View;
+import android.view.autofill.AutofillManager;
+import android.view.autofill.AutofillValue;
+
+import org.chromium.base.Log;
+
+import java.lang.ref.WeakReference;
+
+/**
+ * The class to call Android's AutofillManager.
+ */
+// TODO(michaelbai): Extend this class to provide instrumentation test. http://crbug.com/717658.
+public class AwAutofillManager {
+    private static final String TAG = "AwAutofillManager";
+
+    private static class AutofillInputUIMonitor extends AutofillManager.AutofillCallback {
+        private WeakReference<AwAutofillManager> mManager;
+
+        public AutofillInputUIMonitor(AwAutofillManager manager) {
+            mManager = new WeakReference<AwAutofillManager>(manager);
+        }
+
+        @Override
+        public void onAutofillEvent(View view, int virtualId, int event) {
+            AwAutofillManager manager = mManager.get();
+            if (manager == null) return;
+            manager.mIsAutofillInputUIShowing = (event == EVENT_INPUT_SHOWN);
+        }
+    }
+
+    private AutofillManager mAutofillManager;
+    private boolean mIsAutofillInputUIShowing;
+    private AutofillInputUIMonitor mMonitor;
+
+    public AwAutofillManager(Context context) {
+        mAutofillManager = context.getSystemService(AutofillManager.class);
+        mMonitor = new AutofillInputUIMonitor(this);
+        mAutofillManager.registerCallback(mMonitor);
+    }
+
+    public void notifyVirtualValueChanged(View parent, int childId, AutofillValue value) {
+        if (isDestroyed()) return;
+        mAutofillManager.notifyValueChanged(parent, childId, value);
+    }
+
+    public void commit() {
+        if (isDestroyed()) return;
+        mAutofillManager.commit();
+    }
+
+    public void cancel() {
+        if (isDestroyed()) return;
+        mAutofillManager.cancel();
+    }
+
+    public void notifyVirtualViewEntered(View parent, int childId, Rect absBounds) {
+        if (isDestroyed()) return;
+        mAutofillManager.notifyViewEntered(parent, childId, absBounds);
+    }
+
+    public void notifyVirtualViewExited(View parent, int childId) {
+        if (isDestroyed()) return;
+        mAutofillManager.notifyViewExited(parent, childId);
+    }
+
+    public void requestAutofill(View parent, int virtualId, Rect absBounds) {
+        if (isDestroyed()) return;
+        mAutofillManager.requestAutofill(parent, virtualId, absBounds);
+    }
+
+    public boolean isAutofillInputUIShowing() {
+        if (isDestroyed()) return false;
+        return mIsAutofillInputUIShowing;
+    }
+
+    public void destroy() {
+        if (isDestroyed()) return;
+        mAutofillManager.unregisterCallback(mMonitor);
+        mAutofillManager = null;
+    }
+
+    private boolean isDestroyed() {
+        if (mAutofillManager == null) {
+            Log.w(TAG, "Application attempted to call on a destroyed AwAutofillManager",
+                    new Throwable());
+        }
+        return mAutofillManager == null;
+    }
+}
diff --git a/android_webview/java/src/org/chromium/android_webview/AwAutofillProvider.java b/android_webview/java/src/org/chromium/android_webview/AwAutofillProvider.java
new file mode 100644
index 000000000000..cd70319cb994
--- /dev/null
+++ b/android_webview/java/src/org/chromium/android_webview/AwAutofillProvider.java
@@ -0,0 +1,378 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.android_webview;
+
+import android.content.Context;
+import android.graphics.Matrix;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.util.SparseArray;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewStructure;
+import android.view.autofill.AutofillValue;
+
+import org.chromium.base.ThreadUtils;
+import org.chromium.components.autofill.AutofillProvider;
+import org.chromium.components.autofill.FormData;
+import org.chromium.components.autofill.FormFieldData;
+import org.chromium.content_public.browser.WebContents;
+import org.chromium.ui.base.WindowAndroid;
+import org.chromium.ui.display.DisplayAndroid;
+
+/**
+ * This class uses Android autofill service to fill web form. All methods are
+ * supposed to be called in UI thread.
+ *
+ * This class doesn't have 1:1 mapping to native AutofillProviderAndroid and is
+ * same as how AwContents.java mapping to native AwContents, AwAutofillProvider
+ * is owned by AwContents.java and AutofillProviderAndroid is owned by native
+ * AwContents.
+ */
+public class AwAutofillProvider extends AutofillProvider {
+    private static class FocusField {
+        public final short fieldIndex;
+        public final Rect absBound;
+
+        public FocusField(short fieldIndex, Rect absBound) {
+            this.fieldIndex = fieldIndex;
+            this.absBound = absBound;
+        }
+    }
+    /**
+     * The class to wrap the request to framework.
+     *
+     * Though framework guarantees always giving us the autofill value of current
+     * session, we still want to verify this by using unique virtual id which is
+     * composed of sessionId and form field index, we don't use the request id
+     * which comes from renderer as session id because it is not unique.
+     */
+    private static class AutofillRequest {
+        private static final int INIT_ID = 1; // ID can't be 0 in Android.
+        private static int sSessionId = INIT_ID;
+        public final int sessionId;
+        private FormData mFormData;
+        private FocusField mFocusField;
+
+        public AutofillRequest(FormData formData, FocusField focus) {
+            sessionId = getNextClientId();
+            mFormData = formData;
+            mFocusField = focus;
+        }
+
+        public void fillViewStructure(ViewStructure structure) {
+            structure.setClassName(mFormData.mName);
+            structure.setWebDomain(mFormData.mHost);
+            int index = structure.addChildCount(mFormData.mFields.size());
+            short fieldIndex = 0;
+            for (FormFieldData field : mFormData.mFields) {
+                ViewStructure child = structure.newChild(index++);
+                int virtualId = toVirtualId(sessionId, fieldIndex++);
+                child.setAutofillId(structure.getAutofillId(), virtualId);
+                if (field.mAutocompleteAttr != null) {
+                    child.setAutofillHints(field.mAutocompleteAttr.split(" +"));
+                }
+                child.setHint(field.mPlaceholder);
+                child.setHtmlInfo(child.newHtmlInfoBuilder("input")
+                                          .addAttribute("name", field.mName)
+                                          .addAttribute("type", field.mType)
+                                          .build());
+                switch (field.getControlType()) {
+                    case FormFieldData.TYPE_LIST:
+                        child.setAutofillType(View.AUTOFILL_TYPE_LIST);
+                        child.setAutofillOptions(field.mOptionContents);
+                        int i = findIndex(field.mOptionValues, field.getValue());
+                        if (i != -1) {
+                            child.setAutofillValue(AutofillValue.forList(i));
+                        }
+                        break;
+                    case FormFieldData.TYPE_TOGGLE:
+                        child.setAutofillType(View.AUTOFILL_TYPE_TOGGLE);
+                        child.setAutofillValue(AutofillValue.forToggle(field.isChecked()));
+                        break;
+                    case FormFieldData.TYPE_TEXT:
+                        child.setAutofillType(View.AUTOFILL_TYPE_TEXT);
+                        child.setAutofillValue(AutofillValue.forText(field.getValue()));
+                        break;
+                    default:
+                        break;
+                }
+            }
+        }
+
+        public boolean autofill(final SparseArray<AutofillValue> values) {
+            for (int i = 0; i < values.size(); ++i) {
+                int id = values.keyAt(i);
+                if (toSessionId(id) != sessionId) return false;
+                AutofillValue value = values.get(id);
+                if (value == null) continue;
+                short index = toIndex(id);
+                if (index < 0 || index >= mFormData.mFields.size()) return false;
+                FormFieldData field = mFormData.mFields.get(index);
+                if (field == null) return false;
+                switch (field.getControlType()) {
+                    case FormFieldData.TYPE_LIST:
+                        int j = value.getListValue();
+                        if (j < 0 && j >= field.mOptionValues.length) continue;
+                        field.updateValue(field.mOptionValues[j]);
+                        break;
+                    case FormFieldData.TYPE_TOGGLE:
+                        field.setChecked(value.getToggleValue());
+                        break;
+                    case FormFieldData.TYPE_TEXT:
+                        field.updateValue((String) value.getTextValue());
+                        break;
+                    default:
+                        break;
+                }
+            }
+            return true;
+        }
+
+        public void setFocusField(FocusField focusField) {
+            mFocusField = focusField;
+        }
+
+        public FocusField getFocusField() {
+            return mFocusField;
+        }
+
+        public int getFieldCount() {
+            return mFormData.mFields.size();
+        }
+
+        public AutofillValue getFieldNewValue(int index) {
+            FormFieldData field = mFormData.mFields.get(index);
+            if (field == null) return null;
+            String value = field.getValue();
+            return AutofillValue.forText(value);
+        }
+
+        public int getVirtualId(short index) {
+            return toVirtualId(sessionId, index);
+        }
+
+        private static int findIndex(String[] values, String value) {
+            if (values != null && value != null) {
+                for (int i = 0; i < values.length; i++) {
+                    if (value.equals(values[i])) return i;
+                }
+            }
+            return -1;
+        }
+
+        private static int getNextClientId() {
+            ThreadUtils.assertOnUiThread();
+            if (sSessionId == 0xffff) sSessionId = INIT_ID;
+            return sSessionId++;
+        }
+
+        private static int toSessionId(int virtualId) {
+            return (virtualId & 0xffff0000) >> 16;
+        }
+
+        private static short toIndex(int virtualId) {
+            return (short) (virtualId & 0xffff);
+        }
+
+        private static int toVirtualId(int clientId, short index) {
+            return (clientId << 16) | index;
+        }
+    }
+
+    private AwAutofillManager mAutofillManager;
+    private ViewGroup mContainerView;
+    private WebContents mWebContents;
+
+    private AutofillRequest mRequest;
+    private long mNativeAutofillProvider;
+
+    public AwAutofillProvider(Context context, ViewGroup containerView) {
+        mAutofillManager = new AwAutofillManager(context);
+        mContainerView = containerView;
+    }
+
+    @Override
+    public void onContainerViewChanged(ViewGroup containerView) {
+        mContainerView = containerView;
+    }
+
+    @Override
+    public void onProvideAutoFillVirtualStructure(ViewStructure structure, int flags) {
+        // This method could be called for the session started by the native
+        // control outside of WebView, e.g. the URL bar, in this case, we simply
+        // return.
+        if (mRequest == null) return;
+        mRequest.fillViewStructure(structure);
+    }
+
+    @Override
+    public void autofill(final SparseArray<AutofillValue> values) {
+        if (mNativeAutofillProvider != 0 && mRequest.autofill((values))) {
+            autofill(mNativeAutofillProvider, mRequest.mFormData);
+        }
+    }
+
+    @Override
+    public boolean shouldQueryAutofillSuggestion() {
+        return mRequest != null && mRequest.getFocusField() != null
+                && !mAutofillManager.isAutofillInputUIShowing();
+    }
+
+    @Override
+    public void queryAutofillSuggestion() {
+        if (shouldQueryAutofillSuggestion()) {
+            FocusField focusField = mRequest.getFocusField();
+            mAutofillManager.requestAutofill(mContainerView,
+                    mRequest.getVirtualId(focusField.fieldIndex), focusField.absBound);
+        }
+    }
+
+    @Override
+    public void startAutofillSession(
+            FormData formData, int focus, float x, float y, float width, float height) {
+        // Check focusField inside short value?
+        // Autofill Manager might have session that wasn't started by WebView,
+        // we just always cancel existing session here.
+        mAutofillManager.cancel();
+        Rect absBound = transformToWindowBounds(new RectF(x, y, x + width, y + height));
+        mRequest = new AutofillRequest(formData, new FocusField((short) focus, absBound));
+        int virtualId = mRequest.getVirtualId((short) focus);
+        mAutofillManager.notifyVirtualViewEntered(mContainerView, virtualId, absBound);
+    }
+
+    @Override
+    public void onTextFieldDidChange(int index, float x, float y, float width, float height) {
+        // Check index inside short value?
+        if (mRequest == null) return;
+
+        short sIndex = (short) index;
+        FocusField focusField = mRequest.getFocusField();
+        if (focusField == null || sIndex != focusField.fieldIndex) {
+            onFocusChanged(true, index, x, y, width, height);
+        } else {
+            // Currently there is no api to notify both value and position
+            // change, before the API is availabe, we still need to call
+            // notifyVirtualViewEntered() to tell current coordinates because
+            // the position could be changed.
+            int virtualId = mRequest.getVirtualId(sIndex);
+            Rect absBound = transformToWindowBounds(new RectF(x, y, x + width, y + height));
+            mAutofillManager.notifyVirtualViewExited(mContainerView, virtualId);
+            mAutofillManager.notifyVirtualViewEntered(mContainerView, virtualId, absBound);
+            // Update focus field position.
+            mRequest.setFocusField(new FocusField(focusField.fieldIndex, absBound));
+        }
+        notifyVirtualValueChanged(index);
+    }
+
+    private void notifyVirtualValueChanged(int index) {
+        AutofillValue autofillValue = mRequest.getFieldNewValue(index);
+        mAutofillManager.notifyVirtualValueChanged(
+                mContainerView, mRequest.getVirtualId((short) index), autofillValue);
+    }
+
+    @Override
+    public void onWillSubmitForm() {
+        // The changes could be missing, like those made by Javascript, we'd better to notify
+        // AutofillManager current values. also see crbug.com/353001 and crbug.com/732856.
+        notifyFormValues();
+        mAutofillManager.commit();
+        mRequest = null;
+    }
+
+    @Override
+    public void onFocusChanged(
+            boolean focusOnForm, int focusField, float x, float y, float width, float height) {
+        // Check focusField inside short value?
+        // FocusNoLongerOnForm is called after form submitted.
+        if (mRequest == null) return;
+        FocusField prev = mRequest.getFocusField();
+        if (focusOnForm) {
+            Rect absBound = transformToWindowBounds(new RectF(x, y, x + width, y + height));
+            if (prev != null && prev.fieldIndex == focusField && absBound.equals(prev.absBound)) {
+                return;
+            }
+
+            // Notify focus changed.
+            if (prev != null) {
+                mAutofillManager.notifyVirtualViewExited(
+                        mContainerView, mRequest.getVirtualId(prev.fieldIndex));
+            }
+
+            mAutofillManager.notifyVirtualViewEntered(
+                    mContainerView, mRequest.getVirtualId((short) focusField), absBound);
+            // The focus field value might not sync with platform's
+            // AutofillManager, just notify it value changed.
+            notifyVirtualValueChanged(focusField);
+            mRequest.setFocusField(new FocusField((short) focusField, absBound));
+        } else {
+            if (prev == null) return;
+            // Notify focus changed.
+            mAutofillManager.notifyVirtualViewExited(
+                    mContainerView, mRequest.getVirtualId(prev.fieldIndex));
+            mRequest.setFocusField(null);
+        }
+    }
+
+    @Override
+    protected void reset() {
+        mAutofillManager.cancel();
+        mRequest = null;
+    }
+
+    @Override
+    protected void setNativeAutofillProvider(long nativeAutofillProvider) {
+        if (nativeAutofillProvider == mNativeAutofillProvider) return;
+        mNativeAutofillProvider = nativeAutofillProvider;
+        // Setting the mNativeAutofillProvider to 0 may occur as a
+        // result of WebView.destroy, or because a WebView has been
+        // gc'ed. In the former case we can go ahead and clean up the
+        // frameworks autofill manager, but in the latter case the
+        // binder connection has already been dropped in a framework
+        // finalizer, and so the methods we call will throw. It's not
+        // possible to know which case we're in, so just catch and
+        // ignore the exception.
+        try {
+            reset();
+            if (nativeAutofillProvider == 0) {
+                mAutofillManager.destroy();
+            }
+        } catch (IllegalStateException e) {
+        }
+    }
+
+    @Override
+    public void setWebContents(WebContents webContents) {
+        if (webContents == mWebContents) return;
+        mWebContents = webContents;
+        reset();
+    }
+
+    @Override
+    protected void onDidFillAutofillFormData() {
+        notifyFormValues();
+    }
+
+    private void notifyFormValues() {
+        if (mRequest == null) return;
+        for (int i = 0; i < mRequest.getFieldCount(); ++i) notifyVirtualValueChanged(i);
+    }
+
+    private Rect transformToWindowBounds(RectF rect) {
+        // Convert bounds to device pixel.
+        WindowAndroid windowAndroid = mWebContents.getTopLevelNativeWindow();
+        DisplayAndroid displayAndroid = windowAndroid.getDisplay();
+        float dipScale = displayAndroid.getDipScale();
+        RectF bounds = new RectF(rect);
+        Matrix matrix = new Matrix();
+        matrix.setScale(dipScale, dipScale);
+        int[] location = new int[2];
+        mContainerView.getLocationOnScreen(location);
+        matrix.postTranslate(location[0], location[1]);
+        matrix.mapRect(bounds);
+        return new Rect(
+                (int) bounds.left, (int) bounds.top, (int) bounds.right, (int) bounds.bottom);
+    }
+}
diff --git a/android_webview/java/src/org/chromium/android_webview/AwContents.java b/android_webview/java/src/org/chromium/android_webview/AwContents.java
index dabc79b0cf01..ace5f4030432 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwContents.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContents.java
@@ -41,8 +41,10 @@ import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.accessibility.AccessibilityNodeProvider;
 import android.view.animation.AnimationUtils;
+import android.view.autofill.AutofillValue;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputConnection;
+import android.view.textclassifier.TextClassifier;
 import android.webkit.JavascriptInterface;
 import android.webkit.ValueCallback;
 
@@ -1059,7 +1061,7 @@ public class AwContents implements SmartClipProvider {
      */
     private void setNewAwContents(long newAwContentsPtr) {
         // Move the text classifier to the new ContentViewCore.
-        Object textClassifier =
+        TextClassifier textClassifier =
                 mContentViewCore == null ? null : mContentViewCore.getCustomTextClassifier();
 
         if (mNativeAwContents != 0) {
@@ -2360,7 +2362,7 @@ public class AwContents implements SmartClipProvider {
         }
     }
 
-    public void autofill(final SparseArray<Object> values) {
+    public void autofill(final SparseArray<AutofillValue> values) {
         if (mAutofillProvider != null) {
             mAutofillProvider.autofill(values);
         }
@@ -2738,14 +2740,12 @@ public class AwContents implements SmartClipProvider {
                 mNativeAwContents, rendererRequestedPriority, waivedWhenNotVisible);
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
-    public void setTextClassifier(Object textClassifier) {
+    public void setTextClassifier(TextClassifier textClassifier) {
         assert mContentViewCore != null;
         mContentViewCore.setTextClassifier(textClassifier);
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
-    public Object getTextClassifier() {
+    public TextClassifier getTextClassifier() {
         assert mContentViewCore != null;
         return mContentViewCore.getTextClassifier();
     }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManager.java b/chrome/android/java/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManager.java
index c9ebe2c2a517..a568b37645f0 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManager.java
@@ -11,6 +11,7 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.ViewTreeObserver.OnGlobalFocusChangeListener;
+import android.view.textclassifier.TextClassifier;
 
 import org.chromium.base.ObserverList;
 import org.chromium.base.SysUtils;
@@ -1236,15 +1237,15 @@ public class ContextualSearchManager implements ContextualSearchManagementDelega
     public void cancelAllRequests() {}
 
     @Override
-    public void setTextClassifier(Object textClassifier) {}
+    public void setTextClassifier(TextClassifier textClassifier) {}
 
     @Override
-    public Object getTextClassifier() {
+    public TextClassifier getTextClassifier() {
         return null;
     }
 
     @Override
-    public Object getCustomTextClassifier() {
+    public TextClassifier getCustomTextClassifier() {
         return null;
     }
 
diff --git a/components/autofill/android/java/src/org/chromium/components/autofill/AutofillProvider.java b/components/autofill/android/java/src/org/chromium/components/autofill/AutofillProvider.java
index ece02e17e673..ce1a44956a1c 100644
--- a/components/autofill/android/java/src/org/chromium/components/autofill/AutofillProvider.java
+++ b/components/autofill/android/java/src/org/chromium/components/autofill/AutofillProvider.java
@@ -7,6 +7,7 @@ package org.chromium.components.autofill;
 import android.util.SparseArray;
 import android.view.ViewGroup;
 import android.view.ViewStructure;
+import android.view.autofill.AutofillValue;
 
 import org.chromium.base.annotations.CalledByNative;
 import org.chromium.base.annotations.JNINamespace;
@@ -42,7 +43,7 @@ public abstract class AutofillProvider {
      * @param values the array of autofill values, the key is virtual id of form
      *            field.
      */
-    public abstract void autofill(final SparseArray<Object> values);
+    public abstract void autofill(final SparseArray<AutofillValue> values);
 
     /**
      * Invoked when autofill service needs the form structure.
diff --git a/content/public/android/BUILD.gn b/content/public/android/BUILD.gn
index b6eac88c8058..9fd5e23dac32 100644
--- a/content/public/android/BUILD.gn
+++ b/content/public/android/BUILD.gn
@@ -114,7 +114,6 @@ android_library("content_java") {
     "java/src/org/chromium/content/browser/ChildProcessCreationParams.java",
     "java/src/org/chromium/content/browser/ChildProcessLauncherHelper.java",
     "java/src/org/chromium/content/browser/ContentChildProcessConstants.java",
-    "java/src/org/chromium/content/browser/ContentClassFactory.java",
     "java/src/org/chromium/content/browser/ContentFeatureList.java",
     "java/src/org/chromium/content/browser/ContentNfcDelegate.java",
     "java/src/org/chromium/content/browser/ContentVideoView.java",
@@ -231,6 +230,7 @@ android_library("content_java") {
     "java/src/org/chromium/content_public/browser/ScreenOrientationDelegate.java",
     "java/src/org/chromium/content_public/browser/ScreenOrientationDelegateManager.java",
     "java/src/org/chromium/content_public/browser/SmartClipCallback.java",
+    "java/src/org/chromium/content_public/browser/SmartSelectionToggle.java",
     "java/src/org/chromium/content_public/browser/WebContents.java",
     "java/src/org/chromium/content_public/browser/WebContentsObserver.java",
     "java/src/org/chromium/content_public/browser/WebContentsStatics.java",
diff --git a/content/public/android/java/src/org/chromium/content/browser/ContentClassFactory.java b/content/public/android/java/src/org/chromium/content/browser/ContentClassFactory.java
deleted file mode 100644
index c52e4f57877c..000000000000
--- a/content/public/android/java/src/org/chromium/content/browser/ContentClassFactory.java
+++ /dev/null
@@ -1,48 +0,0 @@
-// Copyright 2017 The Chromium Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-package org.chromium.content.browser;
-
-import org.chromium.base.ThreadUtils;
-import org.chromium.ui.base.WindowAndroid;
-
-/**
- * A class factory for content browser layer.
- */
-public class ContentClassFactory {
-    private static ContentClassFactory sSingleton;
-
-    /**
-     * Sets the factory object.
-     */
-    public static void set(ContentClassFactory factory) {
-        ThreadUtils.assertOnUiThread();
-
-        sSingleton = factory;
-    }
-
-    /**
-     * Returns the factory object.
-     */
-    public static ContentClassFactory get() {
-        ThreadUtils.assertOnUiThread();
-
-        if (sSingleton == null) sSingleton = new ContentClassFactory();
-        return sSingleton;
-    }
-
-    /**
-     * Constructor.
-     */
-    protected ContentClassFactory() {}
-
-    /**
-     * Creates SmartSelectorProvider object.
-     */
-    public SmartSelectionProvider createSmartSelectionProvider(
-            SmartSelectionProvider.ResultCallback callback, WindowAndroid windowAndroid) {
-        // Implemented by a subclass.
-        return null;
-    }
-}
diff --git a/content/public/android/java/src/org/chromium/content/browser/ContentViewCore.java b/content/public/android/java/src/org/chromium/content/browser/ContentViewCore.java
index 529a4b881c07..9d821f89ef73 100644
--- a/content/public/android/java/src/org/chromium/content/browser/ContentViewCore.java
+++ b/content/public/android/java/src/org/chromium/content/browser/ContentViewCore.java
@@ -31,6 +31,7 @@ import android.view.accessibility.AccessibilityManager.AccessibilityStateChangeL
 import android.view.accessibility.AccessibilityNodeProvider;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputConnection;
+import android.view.textclassifier.TextClassifier;
 
 import org.chromium.base.ObserverList;
 import org.chromium.base.ObserverList.RewindableIterator;
@@ -2197,29 +2198,26 @@ public class ContentViewCore implements AccessibilityStateChangeListener, Displa
         mSelectionPopupController.setSelectionClient(selectionClient);
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     /**
      * Sets TextClassifier for Smart Text selection.
      */
-    public void setTextClassifier(Object textClassifier) {
+    public void setTextClassifier(TextClassifier textClassifier) {
         mSelectionPopupController.setTextClassifier(textClassifier);
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     /**
      * Returns TextClassifier that is used for Smart Text selection. If the custom classifier
      * has been set with setTextClassifier, returns that object, otherwise returns the system
      * classifier.
      */
-    public Object getTextClassifier() {
+    public TextClassifier getTextClassifier() {
         return mSelectionPopupController.getTextClassifier();
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     /**
      * Returns the TextClassifier which has been set with setTextClassifier(), or null.
      */
-    public Object getCustomTextClassifier() {
+    public TextClassifier getCustomTextClassifier() {
         return mSelectionPopupController.getCustomTextClassifier();
     }
 
diff --git a/content/public/android/java/src/org/chromium/content/browser/SelectionClient.java b/content/public/android/java/src/org/chromium/content/browser/SelectionClient.java
index a9c63b798aad..6194573a33ff 100644
--- a/content/public/android/java/src/org/chromium/content/browser/SelectionClient.java
+++ b/content/public/android/java/src/org/chromium/content/browser/SelectionClient.java
@@ -4,6 +4,8 @@
 
 package org.chromium.content.browser;
 
+import android.view.textclassifier.TextClassifier;
+
 /**
  * Interface to a content layer client that can process and modify selection text.
  */
@@ -56,17 +58,17 @@ public interface SelectionClient {
      * Sets TextClassifier for the Smart Text selection. Pass null argument to use the system
      * classifier
      */
-    public void setTextClassifier(Object textClassifier);
+    public void setTextClassifier(TextClassifier textClassifier);
 
     /**
      * Gets TextClassifier that is used for the Smart Text selection. If the custom classifier
      * has been set with setTextClassifier, returns that object, otherwise returns the system
      * classifier.
      */
-    public Object getTextClassifier();
+    public TextClassifier getTextClassifier();
 
     /**
      * Returns the TextClassifier which has been set with setTextClassifier(), or null.
      */
-    public Object getCustomTextClassifier();
+    public TextClassifier getCustomTextClassifier();
 }
diff --git a/content/public/android/java/src/org/chromium/content/browser/SelectionPopupController.java b/content/public/android/java/src/org/chromium/content/browser/SelectionPopupController.java
index e98348bf56ad..543707d3f30f 100644
--- a/content/public/android/java/src/org/chromium/content/browser/SelectionPopupController.java
+++ b/content/public/android/java/src/org/chromium/content/browser/SelectionPopupController.java
@@ -30,6 +30,7 @@ import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewConfiguration;
 import android.view.WindowManager;
+import android.view.textclassifier.TextClassifier;
 
 import org.chromium.base.BuildInfo;
 import org.chromium.base.Log;
@@ -136,9 +137,6 @@ public class SelectionPopupController extends ActionModeCallbackHelper {
     // SmartSelectionProvider was able to classify it, otherwise null.
     private SmartSelectionProvider.Result mClassificationResult;
 
-    // The resource ID for Assist menu item.
-    private int mAssistMenuItemId;
-
     // This variable is set to true when showActionMode() is postponed till classification result
     // arrives or till the selection is adjusted based on the classification result.
     private boolean mPendingShowActionMode;
@@ -179,12 +177,6 @@ public class SelectionPopupController extends ActionModeCallbackHelper {
                 SmartSelectionClient.create(new SmartSelectionCallback(), window, webContents);
 
         mLastSelectedText = "";
-        // TODO(timav): Use android.R.id.textAssist for the Assist item id once we switch to
-        // Android O SDK and remove |mAssistMenuItemId|.
-        if (BuildInfo.isAtLeastO()) {
-            mAssistMenuItemId =
-                    mContext.getResources().getIdentifier("textAssist", "id", "android");
-        }
 
         nativeInit(webContents);
     }
@@ -616,16 +608,10 @@ public class SelectionPopupController extends ActionModeCallbackHelper {
 
     private void updateAssistMenuItem(MenuDescriptor descriptor) {
         // There is no Assist functionality before Android O.
-        if (!BuildInfo.isAtLeastO() || mAssistMenuItemId == 0) return;
-
-        // The assist menu item ID has to be equal to android.R.id.textAssist. Until we compile
-        // with Android O SDK where this ID is defined we replace the corresponding inflated
-        // item with an item with the proper ID.
-        // TODO(timav): Use android.R.id.textAssist for the Assist item id once we switch to
-        // Android O SDK and remove |mAssistMenuItemId|.
+        if (!BuildInfo.isAtLeastO()) return;
 
         if (mClassificationResult != null && mClassificationResult.hasNamedAction()) {
-            descriptor.addItem(R.id.select_action_menu_assist_items, mAssistMenuItemId, 1,
+            descriptor.addItem(R.id.select_action_menu_assist_items, android.R.id.textAssist, 1,
                     mClassificationResult.label, mClassificationResult.icon);
         }
     }
@@ -672,7 +658,7 @@ public class SelectionPopupController extends ActionModeCallbackHelper {
         int id = item.getItemId();
         int groupId = item.getGroupId();
 
-        if (BuildInfo.isAtLeastO() && id == mAssistMenuItemId) {
+        if (BuildInfo.isAtLeastO()) {
             doAssistAction();
             mode.finish();
         } else if (id == R.id.select_action_menu_select_all) {
@@ -1138,29 +1124,26 @@ public class SelectionPopupController extends ActionModeCallbackHelper {
                 PackageManager.MATCH_DEFAULT_ONLY).size() > 0;
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     /**
      * Sets TextClassifier for Smart Text selection.
      */
-    public void setTextClassifier(Object textClassifier) {
+    public void setTextClassifier(TextClassifier textClassifier) {
         if (mSelectionClient != null) mSelectionClient.setTextClassifier(textClassifier);
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     /**
      * Returns TextClassifier that is used for Smart Text selection. If the custom classifier
      * has been set with setTextClassifier, returns that object, otherwise returns the system
      * classifier.
      */
-    public Object getTextClassifier() {
+    public TextClassifier getTextClassifier() {
         return mSelectionClient == null ? null : mSelectionClient.getTextClassifier();
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     /**
      * Returns the TextClassifier which has been set with setTextClassifier(), or null.
      */
-    public Object getCustomTextClassifier() {
+    public TextClassifier getCustomTextClassifier() {
         return mSelectionClient == null ? null : mSelectionClient.getCustomTextClassifier();
     }
 
diff --git a/content/public/android/java/src/org/chromium/content/browser/SmartSelectionClient.java b/content/public/android/java/src/org/chromium/content/browser/SmartSelectionClient.java
index 1990bca0567d..3a5e9937b6d6 100644
--- a/content/public/android/java/src/org/chromium/content/browser/SmartSelectionClient.java
+++ b/content/public/android/java/src/org/chromium/content/browser/SmartSelectionClient.java
@@ -6,6 +6,7 @@ package org.chromium.content.browser;
 
 import android.support.annotation.IntDef;
 import android.text.TextUtils;
+import android.view.textclassifier.TextClassifier;
 
 import org.chromium.base.annotations.CalledByNative;
 import org.chromium.base.annotations.JNINamespace;
@@ -39,22 +40,25 @@ public class SmartSelectionClient implements SelectionClient {
     // Used for surrounding text request.
     private static final int NUM_EXTRA_CHARS = 240;
 
+    // Is smart selection enabled?
+    private static boolean sEnabled;
+
     private long mNativeSmartSelectionClient;
     private SmartSelectionProvider mProvider;
     private SmartSelectionProvider.ResultCallback mCallback;
 
+    public static void setEnabled(boolean enabled) {
+        sEnabled = enabled;
+    }
+
     /**
      * Creates the SmartSelectionClient. Returns null in case SmartSelectionProvider does not exist
      * in the system.
      */
     public static SmartSelectionClient create(SmartSelectionProvider.ResultCallback callback,
             WindowAndroid windowAndroid, WebContents webContents) {
-        SmartSelectionProvider provider =
-                ContentClassFactory.get().createSmartSelectionProvider(callback, windowAndroid);
-
-        // SmartSelectionProvider might not exist.
-        if (provider == null) return null;
-
+        if (!sEnabled) return null;
+        SmartSelectionProvider provider = new SmartSelectionProvider(callback, windowAndroid);
         return new SmartSelectionClient(provider, callback, webContents);
     }
 
@@ -100,21 +104,18 @@ public class SmartSelectionClient implements SelectionClient {
         mProvider.cancelAllRequests();
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     @Override
-    public void setTextClassifier(Object textClassifier) {
+    public void setTextClassifier(TextClassifier textClassifier) {
         mProvider.setTextClassifier(textClassifier);
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     @Override
-    public Object getTextClassifier() {
+    public TextClassifier getTextClassifier() {
         return mProvider.getTextClassifier();
     }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
     @Override
-    public Object getCustomTextClassifier() {
+    public TextClassifier getCustomTextClassifier() {
         return mProvider.getCustomTextClassifier();
     }
 
diff --git a/content/public/android/java/src/org/chromium/content/browser/SmartSelectionProvider.java b/content/public/android/java/src/org/chromium/content/browser/SmartSelectionProvider.java
index 427a38833540..80cb3b322102 100644
--- a/content/public/android/java/src/org/chromium/content/browser/SmartSelectionProvider.java
+++ b/content/public/android/java/src/org/chromium/content/browser/SmartSelectionProvider.java
@@ -4,19 +4,30 @@
 
 package org.chromium.content.browser;
 
+import android.annotation.SuppressLint;
+import android.content.Context;
 import android.content.Intent;
 import android.graphics.drawable.Drawable;
+import android.os.AsyncTask;
+import android.os.Handler;
+import android.os.LocaleList;
+import android.support.annotation.IntDef;
 import android.view.View.OnClickListener;
+import android.view.textclassifier.TextClassification;
+import android.view.textclassifier.TextClassificationManager;
+import android.view.textclassifier.TextClassifier;
+import android.view.textclassifier.TextSelection;
 
-import org.chromium.base.annotations.SuppressFBWarnings;
+import org.chromium.ui.base.WindowAndroid;
 
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.util.Locale;
 
 /**
- * The interface that controls Smart Text selection.
+ * Controls Smart Text selection. Talks to the Android TextClassificationManager API.
  */
-@SuppressFBWarnings("UUF_UNUSED_PUBLIC_OR_PROTECTED_FIELD")
-public interface SmartSelectionProvider {
+public class SmartSelectionProvider {
     /**
      * The result of the text analysis.
      */
@@ -72,48 +83,148 @@ public interface SmartSelectionProvider {
         void onClassified(Result result);
     }
 
-    /**
-     * Sends asynchronous request to obtain the selection, analyze its type and suggest
-     * better selection boundaries.
-     * @param text  The textual context that encloses the selected text.
-     * @param start The start index of the selected text inside the textual context.
-     * @param end   The index pointing to the first character that comes after
-     *              the selected text inside the textual context.
-     */
+    private static final String TAG = "SmartSelProvider";
+
+    @IntDef({CLASSIFY, SUGGEST_AND_CLASSIFY})
+    @Retention(RetentionPolicy.SOURCE)
+    private @interface RequestType {}
+
+    private static final int CLASSIFY = 0;
+    private static final int SUGGEST_AND_CLASSIFY = 1;
+
+    private ResultCallback mResultCallback;
+    private WindowAndroid mWindowAndroid;
+    private ClassificationTask mClassificationTask;
+    private TextClassifier mTextClassifier;
+
+    private Handler mHandler;
+    private Runnable mFailureResponseRunnable;
+
+    public SmartSelectionProvider(ResultCallback callback, WindowAndroid windowAndroid) {
+        mResultCallback = callback;
+        mWindowAndroid = windowAndroid;
+        mHandler = new Handler();
+        mFailureResponseRunnable = new Runnable() {
+            @Override
+            public void run() {
+                mResultCallback.onClassified(new Result());
+            }
+        };
+    }
+
     public void sendSuggestAndClassifyRequest(
-            CharSequence text, int start, int end, Locale[] locales);
+            CharSequence text, int start, int end, Locale[] locales) {
+        sendSmartSelectionRequest(SUGGEST_AND_CLASSIFY, text, start, end, locales);
+    }
 
-    /**
-     * Sends asynchronous request to obtain the selection and analyze its type.
-     * @param text  The textual context that encloses the selected text.
-     * @param start The start index of the selected text inside the textual context.
-     * @param end   The index pointing to the first character that comes after
-     *              the selected text inside the textual context.
-     */
-    public void sendClassifyRequest(CharSequence text, int start, int end, Locale[] locales);
+    public void sendClassifyRequest(CharSequence text, int start, int end, Locale[] locales) {
+        sendSmartSelectionRequest(CLASSIFY, text, start, end, locales);
+    }
 
-    /**
-     * Cancel all asynchronous requests.
-     */
-    public void cancelAllRequests();
+    public void cancelAllRequests() {
+        if (mClassificationTask != null) {
+            mClassificationTask.cancel(false);
+            mClassificationTask = null;
+        }
+    }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
-    /**
-     * Sets TextClassifier for Smart Text selection.
-     */
-    public void setTextClassifier(Object textClassifier);
+    public void setTextClassifier(TextClassifier textClassifier) {
+        mTextClassifier = textClassifier;
+    }
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
-    /**
-     * Returns TextClassifier used for Smart Text selection.
-     * If the user sets non-null text classifier object, returns that object. Otherwise returns
-     * the system classifier obtained from the TextClassificationManager service.
-     */
-    public Object getTextClassifier();
+    // TODO(crbug.com/739746): Remove suppression when this constant is added to lint.
+    @SuppressLint("WrongConstant")
+    public TextClassifier getTextClassifier() {
+        if (mTextClassifier != null) return mTextClassifier;
 
-    // TODO(timav): Use |TextClassifier| instead of |Object| after we switch to Android SDK 26.
-    /**
-     * Returns TextClassifier object if the one has been set with setTextClassifier(), or null.
-     */
-    public Object getCustomTextClassifier();
+        Context context = mWindowAndroid.getContext().get();
+        if (context == null) return null;
+
+        return ((TextClassificationManager) context.getSystemService(
+                        Context.TEXT_CLASSIFICATION_SERVICE))
+                .getTextClassifier();
+    }
+
+    public TextClassifier getCustomTextClassifier() {
+        return mTextClassifier;
+    }
+
+    private void sendSmartSelectionRequest(
+            @RequestType int requestType, CharSequence text, int start, int end, Locale[] locales) {
+        TextClassifier classifier = (TextClassifier) getTextClassifier();
+        if (classifier == null || classifier == TextClassifier.NO_OP) {
+            mHandler.post(mFailureResponseRunnable);
+            return;
+        }
+
+        if (mClassificationTask != null) {
+            mClassificationTask.cancel(false);
+            mClassificationTask = null;
+        }
+
+        mClassificationTask =
+                new ClassificationTask(classifier, requestType, text, start, end, locales);
+        mClassificationTask.execute();
+    }
+
+    private class ClassificationTask extends AsyncTask<Void, Void, Result> {
+        private final TextClassifier mTextClassifier;
+        private final int mRequestType;
+        private final CharSequence mText;
+        private final int mOriginalStart;
+        private final int mOriginalEnd;
+        private final Locale[] mLocales;
+
+        ClassificationTask(TextClassifier classifier, @RequestType int requestType,
+                CharSequence text, int start, int end, Locale[] locales) {
+            mTextClassifier = classifier;
+            mRequestType = requestType;
+            mText = text;
+            mOriginalStart = start;
+            mOriginalEnd = end;
+            mLocales = locales;
+        }
+
+        @Override
+        protected Result doInBackground(Void... params) {
+            int start = mOriginalStart;
+            int end = mOriginalEnd;
+
+            if (mRequestType == SUGGEST_AND_CLASSIFY) {
+                TextSelection suggested = mTextClassifier.suggestSelection(
+                        mText, start, end, makeLocaleList(mLocales));
+                start = Math.max(0, suggested.getSelectionStartIndex());
+                end = Math.min(mText.length(), suggested.getSelectionEndIndex());
+                if (isCancelled()) return new Result();
+            }
+
+            TextClassification tc =
+                    mTextClassifier.classifyText(mText, start, end, makeLocaleList(mLocales));
+            return makeResult(start, end, tc);
+        }
+
+        @SuppressLint("NewApi")
+        private LocaleList makeLocaleList(Locale[] locales) {
+            if (locales == null || locales.length == 0) return null;
+            return new LocaleList(locales);
+        }
+
+        private Result makeResult(int start, int end, TextClassification tc) {
+            Result result = new Result();
+
+            result.startAdjust = start - mOriginalStart;
+            result.endAdjust = end - mOriginalEnd;
+            result.label = tc.getLabel();
+            result.icon = tc.getIcon();
+            result.intent = tc.getIntent();
+            result.onClickListener = tc.getOnClickListener();
+
+            return result;
+        }
+
+        @Override
+        protected void onPostExecute(Result result) {
+            mResultCallback.onClassified(result);
+        }
+    }
 }
diff --git a/content/public/android/java/src/org/chromium/content_public/browser/SmartSelectionToggle.java b/content/public/android/java/src/org/chromium/content_public/browser/SmartSelectionToggle.java
new file mode 100644
index 000000000000..aaede14a32ff
--- /dev/null
+++ b/content/public/android/java/src/org/chromium/content_public/browser/SmartSelectionToggle.java
@@ -0,0 +1,16 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.content_public.browser;
+
+import org.chromium.content.browser.SmartSelectionClient;
+
+/**
+ * A public API to enable/disable smart selection. The default is disabled.
+ */
+public class SmartSelectionToggle {
+    public static void setEnabled(boolean enabled) {
+        SmartSelectionClient.setEnabled(enabled);
+    }
+}
-- 
2.14.1

